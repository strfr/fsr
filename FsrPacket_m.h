//
// Generated file, do not edit! Created by opp_msgtool 6.1 from inet/routing/fsr/FsrPacket.msg.
//

#ifndef __INET_FSRPACKET_M_H
#define __INET_FSRPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

struct LinkEntry;
class FsrPacket;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address


namespace inet {

/**
 * Struct generated from inet/routing/fsr/FsrPacket.msg:9 by opp_msgtool.
 */
struct INET_API LinkEntry
{
    LinkEntry();
    uint8_t neighborCount = 0;
    uint8_t neighborIndexStart = 0;
    uint32_t versionNumber = 0;
    Ipv4Address targetNode;
};

// helpers for local use
void INET_API __doPacking(omnetpp::cCommBuffer *b, const LinkEntry& a);
void INET_API __doUnpacking(omnetpp::cCommBuffer *b, LinkEntry& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LinkEntry& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LinkEntry& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>inet/routing/fsr/FsrPacket.msg:16</tt> by opp_msgtool.
 * <pre>
 * class FsrPacket extends FieldsChunk
 * {
 *     Ipv4Address neighborNodes[];
 *     LinkEntry topologyLinks[];
 * }
 * </pre>
 */
class INET_API FsrPacket : public ::inet::FieldsChunk
{
  protected:
    Ipv4Address *neighborNodes = nullptr;
    size_t neighborNodes_arraysize = 0;
    LinkEntry *topologyLinks = nullptr;
    size_t topologyLinks_arraysize = 0;

  private:
    void copy(const FsrPacket& other);

  protected:
    bool operator==(const FsrPacket&) = delete;

  public:
    FsrPacket();
    FsrPacket(const FsrPacket& other);
    virtual ~FsrPacket();
    FsrPacket& operator=(const FsrPacket& other);
    virtual FsrPacket *dup() const override {return new FsrPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setNeighborNodesArraySize(size_t size);
    virtual size_t getNeighborNodesArraySize() const;
    virtual const Ipv4Address& getNeighborNodes(size_t k) const;
    virtual Ipv4Address& getNeighborNodesForUpdate(size_t k) { handleChange();return const_cast<Ipv4Address&>(const_cast<FsrPacket*>(this)->getNeighborNodes(k));}
    virtual void setNeighborNodes(size_t k, const Ipv4Address& neighborNodes);
    virtual void insertNeighborNodes(size_t k, const Ipv4Address& neighborNodes);
    [[deprecated]] void insertNeighborNodes(const Ipv4Address& neighborNodes) {appendNeighborNodes(neighborNodes);}
    virtual void appendNeighborNodes(const Ipv4Address& neighborNodes);
    virtual void eraseNeighborNodes(size_t k);

    virtual void setTopologyLinksArraySize(size_t size);
    virtual size_t getTopologyLinksArraySize() const;
    virtual const LinkEntry& getTopologyLinks(size_t k) const;
    virtual LinkEntry& getTopologyLinksForUpdate(size_t k) { handleChange();return const_cast<LinkEntry&>(const_cast<FsrPacket*>(this)->getTopologyLinks(k));}
    virtual void setTopologyLinks(size_t k, const LinkEntry& topologyLinks);
    virtual void insertTopologyLinks(size_t k, const LinkEntry& topologyLinks);
    [[deprecated]] void insertTopologyLinks(const LinkEntry& topologyLinks) {appendTopologyLinks(topologyLinks);}
    virtual void appendTopologyLinks(const LinkEntry& topologyLinks);
    virtual void eraseTopologyLinks(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FsrPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FsrPacket& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::LinkEntry *p) {return any_ptr(p);}
template<> inline inet::LinkEntry *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::LinkEntry>(); }
template<> inline inet::FsrPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::FsrPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_FSRPACKET_M_H

